Rust勉強

初めて知ったこと
1. 所有権の概念
    1. 数値とタプル（ex.(“a”,10))は値のコピーができる
    2. ベクター（配列）と文字列は、統合で結ぶと、値が移動される
        1. let a=String::from(“test”); let hello=a; println!(“{}”,a);だとコンパイルエラーを生じる
        2. 1でコンパイルエラーを生じないために必要なことは、借用（borrow）をする
        3. let a=“test”; let hello=&a; println!{“{}”,hello);　でいける「&」が借用をするために必要
2. 借用をするときは、「&」を使う必要がある。
3. Rustで定義する変数は、束縛されている。後から値を入れたいなら、可変変数にする必要がある。
    1. let mut x=100;　x=200;と入れてもコンパイルエラーにならずに値を変更することができる。
4. 使用していない変数が存在すると、コンパイルした時に警告が生じる。
5. シャーディングという機能がある。
    1. let x=100; let x=200; で、xの値を200に変更することができる。
6. 関数は、一つだけ戻り値を返すことができる。「->型名」の形で指定する
7. 基本的には、関数の引数は、可変変数にする
